<?php
/**
 ************************************************************************
 * Copyright [2017] [RakutenPay]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ************************************************************************
 */
$helper = Mage::helper('rakutenpay/refund');
?>

<div id="rakutenpay-module">
    <div id="rakutenpay-module-content">
        <div class="wrapper">
            <div id="rakutenpay-module-contents">
                <h2 class="title"><?php echo $helper->__('Estorno'); ?></h2>

                <div class="rakutenpay-search-tools">
                    <form action="javascript:void(0)" method="post">
                        <input type="hidden" name="form_key"
                               value="<?php echo Mage::getSingleton('core/session')->getFormKey(); ?>"/>
                        <input type="submit" class="rakutenpay-button" id="refund-search-button"
                               value="<?php echo $helper->__('Pesquisar'); ?>"/>
                        <select class="rakutenpay-field" name="rakutenpay-days" id="rakutenpay-refund-days-input">
                            <option value='5'>5</option>
                            <option value='10'>10</option>
                            <option value='15'>15</option>
                            <option value='20'>20</option>
                            <option value='25'>25</option>
                            <option value='30'>30</option>
                        </select>
                        <label><?php echo $helper->__('últimos dias'); ?></label>
                    </form>
                </div>

                <table id="refund-table" class="rakutenpay-table">
                    <thead>
                    <tr>
                        <th width="14%"><?php echo $helper->__('Data'); ?></th>
                        <th width="20%"><?php echo $helper->__('ID Magento'); ?></th>
                        <th width="35%"><?php echo $helper->__('ID RakutenPay'); ?></th>
                        <th width="20%"><?php echo $helper->__('Status Magento'); ?></th>
                        <th width="11%"><?php echo $helper->__('Ação'); ?></th>
                    </tr>
                    </thead>
                </table>

                <?php
                $noTransaction = 'Nenhum resultado.';
                $refundSuccess = $helper->__("Transação estornada com sucesso!");
                $refundError = $helper->__("Não foi possível executar esta ação.");
                ?>
            </div>
        </div>
    </div>
</div>

<style>
    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0, 0, 0); /* Fallback color */
        background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: fit-content;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

    hr {
        margin: 5px;
    }

    .correct {
        border: 2px solid #555;
    }

    .wrong {
        border: 2px solid red;
    }
</style>

<div id="billet_modal" class="modal">
    <!-- Modal content -->
    <div class="modal-content" style="height: 125px;">
        Entre com os dados bancários:
        <span class="close" id="billet_close">&times;</span>
        <br/>
        <form id="billet_form">
            <table>
                <tr>
                    <td>CPF/CNPJ:
                    <td><input class="correct" id="billet_document" autocomplete="off"/>
                </tr>
                <tr>
                    <td>Código do Banco:
                    <td><input class="correct" id="billet_bank" autocomplete="off" minlength="3" maxlength="5"/>
                </tr>
                <tr>
                    <td>Agencia:
                    <td><input class="correct" id="billet_agency" autocomplete="off" minlength="3" maxlength="5"/>
                </tr>
                <tr>
                    <td>Conta:
                    <td><input class="correct" id="billet_number" autocomplete="off" minlength="3" maxlength="20"/>
                </tr>
            </table>
        </form>
        <span class="close"><button id="billet_accept">Estornar</button></span>
    </div>
</div>

<div id="value_modal" class="modal">
    <!-- Modal content -->
    <div class="modal-content" style="height: 125px;">
        Entre com o valor do estorno:
        <span class="close" id="value_close">&times;</span>
        <br/>
        <form id="value_form">
            <input type="radio" id="radio_total" name="value_type" value="total" checked>
            <label for="radio_total" id="total_label">Total</label><br/>
            <input type="radio" id="radio_partial" name="value_type" value="partial">
            <label for="radio_partial">Parcial</label>
            <input id="value_input" min="0.0" type="number" step="0.01" disabled="true" autocomplete="off"/>
            <hr>
            Entre com o motivo do estorno:<br/>
            <select id="reason">
                <option value="customer_return_order">Comprador devolveu o pedido</option>
                <option value="customer_return_item">Comprador devolveu um item</option>
                <option value="customer_replace_order">Comprador solicitou a troca do pedido</option>
                <option value="customer_replace_item">Comprador solicitou a troca de um item</option>
                <option value="customer_other">Comprador outro</option>
                <option value="merchant_unavailable_stock">Lojista sem produto em estoque</option>
                <option value="merchant_other">Lojista outro</option>
            </select>
        </form>
        <br/>
        <span class="close"><button id="value_accept">Estornar</button></span>
    </div>
</div>

<script>
    function validateDocument(value) {
        if (value.length === 11) {
            return validateCpf(value);
        } else if (value.length === 14) {
            return validateCnpj(value);
        } else {
            return false;
        }
    }

    function validateCpf(cpf) {
        var numeros, digitos, soma, i, resultado, digitos_iguais;
        digitos_iguais = 1;
        if (cpf.length < 11) {
            return false
        }
        for (i = 0; i < cpf.length - 1; i++)
            if (cpf.charAt(i) != cpf.charAt(i + 1)) {
                digitos_iguais = 0;
                break
            }
        if (!digitos_iguais) {
            numeros = cpf.substring(0, 9);
            digitos = cpf.substring(9);
            soma = 0;
            for (i = 10; i > 1; i--) {
                soma += numeros.charAt(10 - i) * i
            }
            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
            if (resultado != digitos.charAt(0)) {
                return false
            }
            numeros = cpf.substring(0, 10);
            soma = 0;
            for (i = 11; i > 1; i--) {
                soma += numeros.charAt(11 - i) * i
            }
            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
            if (resultado != digitos.charAt(1)) {
                return false
            }
            return true
        } else {
            return false
        }
    }

    function validateCnpj(cnpj) {
        var numbersVal;
        var digits;
        var sum;
        var i;
        var result;
        var pos;
        var size;
        var equal_digits;
        equal_digits = 1;
        if (cnpj.length < 14 && cnpj.length < 15) {
            return false
        }
        for (i = 0; i < cnpj.length - 1; i++) {
            if (cnpj.charAt(i) != cnpj.charAt(i + 1)) {
                equal_digits = 0;
                break
            }
        }
        if (!equal_digits) {
            size = cnpj.length - 2;
            numbersVal = cnpj.substring(0, size);
            digits = cnpj.substring(size);
            sum = 0;
            pos = size - 7;
            for (i = size; i >= 1; i--) {
                sum += numbersVal.charAt(size - i) * pos--;
                if (pos < 2) {
                    pos = 9
                }
            }
            result = sum % 11 < 2 ? 0 : 11 - sum % 11;
            if (result != digits.charAt(0)) {
                return false
            }
            size = size + 1;
            numbersVal = cnpj.substring(0, size);
            sum = 0;
            pos = size - 7;
            for (i = size; i >= 1; i--) {
                sum += numbersVal.charAt(size - i) * pos--;
                if (pos < 2) {
                    pos = 9
                }
            }
            result = sum % 11 < 2 ? 0 : 11 - sum % 11;
            if (result != digits.charAt(1)) {
                return false
            }
            return true
        } else {
            return false
        }
    }

</script>

<script>
    var modal = document.getElementById('billet_modal');
    var span = document.getElementById('billet_close');
    span.onclick = function () {
        modal.style.display = "none";
    };
    var value_modal = document.getElementById('value_modal');
    var value_span = document.getElementById('value_close');
    var value_input = document.getElementById('value_input');
    var radio_total = document.getElementById('radio_total');
    var radio_partial = document.getElementById('radio_partial');
    var total_label = document.getElementById('total_label');
    radio_total.onclick = function () {
        value_input.disabled = true;
    };
    radio_partial.onclick = function () {
        value_input.disabled = false;
    };
    value_span.onclick = function () {
        value_modal.style.display = "none";
    };
    window.onclick = function (event) {
        if (event.target == modal || event.target == value_modal) {
            modal.style.display = "none";
            value_modal.style.display = "none";
        }
    }
</script>

<script type="text/javascript">
    var i = 0;

    jQuery(document).ready(function () {
        //Menu.init();
        PageRefund.init();
    });

    var PageRefund = new function () {
        var requestTransactions = function () {

            // show loading modal
            Modal.showLoading('<?php echo $helper->__('Aguarde...');?>');

            jQuery.ajax({
                url: "<?php echo Mage::getSingleton('adminhtml/url')->getUrl('rakutenpay/adminhtml_refund/doPost'); ?>",
                type: "POST",
                data: {
                    form_key: "<?php echo Mage::getSingleton('core/session')->getFormKey();?>",
                    days: jQuery('#rakutenpay-refund-days-input').find(":selected").text()
                },
                success: function (xhrResult) {

                    xhrResult = JSON.parse(xhrResult);

                    if (xhrResult.status == false && xhrResult.err == "[HTTP 401] - UNAUTHORIZED") {

                        Modal.message('error', "Não foi possível realizar a consulta.");

                    } else {

                        // Ajax result handler and populates dataTable

                        if (xhrResult.status == false) {

                            jQuery('#refund-table').dataTable().fnClearTable(true);
                            Modal.message('alert', "Sem resultados para o período solicitado.");

                        } else {

                            jQuery('#refund-table').dataTable().fnClearTable(true);
                            jQuery('#refund-table').dataTable().fnAddData(xhrResult);
                            jQuery('#refund-table').dataTable()._fnInitComplete();
                            //After reassembling the table removes the modal of loading
                            Modal.hideLoading();

                        }
                    }

                },
                error: function (xhrErr) {
                    Modal.message('error', xhrErr);
                }
            });
        };

        var doRefundHelper = function (jsonArr) {
            Modal.showLoading('<?php echo $helper->__('Aguarde...');?>');
            jQuery.ajax({
                url: "<?php echo Mage::getSingleton('adminhtml/url')->getUrl('rakutenpay/adminhtml_refund/doRefund'); ?>",
                type: "POST",
                data: {
                    form_key: "<?php echo Mage::getSingleton('core/session')->getFormKey();?>",
                    data: jsonArr,
                    days: jQuery('#rakutenpay-refund-days-input').find(":selected").text()
                },
                success: function (xhrResult) {

                    xhrResult = JSON.parse(xhrResult);

                    if (xhrResult.status == false && xhrResult.err == true) {
                        jQuery('#refund-table').dataTable().fnClearTable(true);
                        Modal.message('error', 'Não foi possível executar esta ação.');
                    } else if (xhrResult.status == false && xhrResult.err == "[HTTP 403] - FORBIDDEN") {
                        Modal.message('error', "Sua conta RakutenPay não tem permissão para realizar esta ação.");
                    } else if (xhrResult.status == false) {
                        jQuery('#refund-table').dataTable().fnClearTable(true);
                        Modal.message('error', '<?php echo $refundError; ?>');
                    } else {
                        jQuery('#refund-table').dataTable().fnClearTable(true);
                        jQuery('#refund-table').dataTable().fnAddData(xhrResult);
                        jQuery('#refund-table').dataTable()._fnInitComplete();
                        Modal.message('success', '<?php echo $refundSuccess; ?>');
                    }


                },
                error: function () {
                    Modal.message('error', '<?php echo $refundError; ?>');
                }
            });
        };

        var getValue = function (out_data, payment_id) {
            var data = out_data[0];
            Modal.hideLoading();
            total_label.textContent = "Total (R$ " + data.value.toFixed(2) + ")";
            value_input.max = data.value;
            value_modal.style.display = "block";
            var button = document.getElementById('value_accept');
            button.onclick = function () {
                var reason = document.getElementById('reason').value;
                out_data[0].reason = reason;
                var input_value = parseFloat(value_input.value);
                var selected_type = radio_total.checked == true ? 'total' : 'partial';
                value_modal.style.display = "none";
                button.onclick = null;
                if (selected_type == 'total') {
                    out_data[0].payment_id = payment_id;
                    doRefundHelper(out_data);
                } else if (input_value > 0.0 && input_value < data.value) {
                    out_data[0].type = 'partial';
                    out_data[0].value = input_value;
                    out_data[0].payment_id = payment_id;
                    doRefundHelper(out_data);
                } else {
                    Modal.message('error', '<?php echo $refundError; ?>');
                }
            };
        };

        var doRefund = function (config) {
            jQuery('#messages').empty();
            var jsonArr = [];

            config = config.split('/');
            var value = parseFloat(config[3]);
            var kind = config[4];
            if (kind == 'billet') {
                Modal.hideLoading();
                modal.style.display = "block";
                var button = document.getElementById('billet_accept');
                button.onclick = function () {
                    if (isValidBilletForm()) {
                        modal.style.display = "none";
                        jsonArr.push({
                            type: 'total',
                            reason: 'merchant_other',
                            id: config[0],
                            code: config[1],
                            status: config[2],
                            value: value,
                            doc: document.getElementById('billet_document').inputmask.unmaskedvalue(),
                            bank: document.getElementById('billet_bank').getValue(),
                            agency: document.getElementById('billet_agency').getValue(),
                            number: document.getElementById('billet_number').getValue()
                        });
                        button.onclick = null;
                        getValue(jsonArr, config[5]);
                    } else {
                        Modal.message('error', 'Por favor, preencha todos os campos corretamente.');
                    }
                };

                jQuery('#billet_document').inputmask({
                    mask: ['999.999.999-99', '99.999.999/9999-99'],
                    keepStatic: true,
                    autoUnmask: true
                });
                jQuery('#billet_bank').inputmask({
                    mask: ['9{3,5}'],
                    autoUnmask: true
                });
                jQuery('#billet_agency').inputmask({
                    mask: ['9{3,5|3}'],
                    autoUnmask: true
                });
                jQuery('#billet_number').inputmask({
                    mask: ['9{3,8}-9'],
                    radixPoint: '-',
                    numericInput: true
                });
            } else {
                jsonArr.push({
                    type: 'total',
                    reason: 'merchant_other',
                    id: config[0],
                    code: config[1],
                    status: config[2],
                    value: value
                });
                getValue(jsonArr, config[5]);
            }
        };

        var isValidBilletForm = function isValidBilletForm() {
            var customer_document;
            var bank;
            var agency;
            var number;

            customer_document = document.getElementById('billet_document').getValue();
            bank = document.getElementById('billet_bank').getValue();
            agency = document.getElementById('billet_agency').getValue();
            number = document.getElementById('billet_number').inputmask.unmaskedvalue();

            if (!customer_document || customer_document.length == 0 ||
                !bank || bank.length < 3 ||
                !agency || agency.length < 3 ||
                !number || number.length < 4) {
                return false;
            }

            if (!validateDocument(customer_document)) {
                return false;
            }

            return true;
        };

        var prepareTable = function () {
            var flow = 0;
            var totalRows = 0;
            var page = 0;
            var currentPage = 0;
            var oTable;

            jQuery.fn.dataTableExt.oApi.fnStandingRedraw = function (oSettings) {
                //redraw to account for filtering and sorting
                // concept here is that (for client side) there is a row got inserted at the end (for an add)
                // or when a record was modified it could be in the middle of the table
                // that is probably not supposed to be there - due to filtering / sorting
                // so we need to re process filtering and sorting
                // BUT - if it is server side - then this should be handled by the server - so skip this step
                if (oSettings.oFeatures.bServerSide === false) {
                    var before = oSettings._iDisplayStart;
                    oSettings.oApi._fnReDraw(oSettings);
                    //iDisplayStart has been reset to zero - so lets change it back
                    oSettings._iDisplayStart = before;
                    oSettings.oApi._fnCalculateEnd(oSettings);
                }

                //draw the 'current' page
                oSettings.oApi._fnDraw(oSettings);
            };

            // Initiates the creation of the table dataTable
            jQuery('#refund-table').dataTable({
                "info": false,
                "lengthChange": false,
                "searching": false,
                "bStateSave": true,
                "pageLength": 10,
                "aaSorting": [[0, "desc"]],
                "aoColumnDefs": [
                    {'bSortable': false, 'aTargets': [4]},
                    {"sClass": "tabela", 'aTargets': [1, 2, 3, 4]}
                ],

                // Creates paging and notifies when there is no record
                "oLanguage": {
                    "sEmptyTable": "<?php echo $helper->__($noTransaction); ?>",
                    "oPaginate": {
                        "sNext": '<?php echo $helper->__('Próximo');?>',
                        "sLast": '<?php echo $helper->__('Último');?>',
                        "sFirst": '<?php echo $helper->__('Primeiro');?>',
                        "sPrevious": '<?php echo $helper->__('Anterior');?>'
                    }
                },

                // Every interaction with the table it is called
                "fnDrawCallback": function (oSettings) {
                    // Makes when clicked on a registry is redirected to the editing order of Magento
                    oTable = this;
                    totalRows = oTable.fnGetData().length;
                    var table = jQuery('#refund-table').DataTable();
                    var info = table.page.info();

                    //trClick
                    if (totalRows >= 1) {
                        var href;
                        jQuery('#refund-table tbody tr').unbind('click');

                        jQuery('#refund-table tbody tr').bind('click', function () {
                            href = jQuery(table.row(this).data()[4])[0].href;
                            jQuery('#refund-table tbody').off();
                            jQuery('#refund-table tbody').on('click', 'td', function () {
                                if (jQuery(this).index() != 4) {
                                    window.open(href, '_blank');
                                }
                            });
                        });
                    }

                    //Checkbox enable | disable
                    jQuery('#refund-table tbody input:checkbox').change(function () {
                        var isChecked = jQuery("#refund-table tbody :checked").length;

                        if (isChecked > 0) {
                            jQuery('#conciliation-button').prop("disabled", false);
                        } else {
                            jQuery('#conciliation-button').prop("disabled", true);
                        }
                    });

                    // Only if greater than 10 records show paging
                    if (totalRows > 10) {
                        jQuery('.dataTables_paginate').css('display', 'block');
                        flow = 1;
                    } else {
                        jQuery('.dataTables_paginate').css('display', 'none');
                        flow = 0;
                    }

                    // If the home page does not display the previous page button
                    if (info.page == 0) {
                        jQuery('a#refund-table_previous').css('display', 'none');
                    }

                    // If the last page does not display the next page button
                    if ((info.page + 1) == info.pages) {
                        jQuery('a#refund-table_next').css('display', 'none');
                    }

                    i++;

                    // Stores which is the page that appears after update
                    if (i == 1) {
                        if (page >= 1 && totalRows < 1) {
                            currentPage = page - 1;
                        } else {
                            currentPage = page;
                        }
                    }

                    // Stores the current page, calculated by number of records and number of records per page
                    page = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength);
                },

                // When it completes assembly of the table is executed
                "initComplete": function (oSettings) {
                    oTable = this;

                    if (currentPage != 0) {
                        // When upgraded back on the page that was
                        oTable.fnPageChange(currentPage);
                    }
                }
            });
        };

        this.init = function () {
            prepareTable();

            jQuery('#refund-search-button').click(function () {
                requestTransactions();
            });

            jQuery('#refund-table').on('click', 'a.action', function () {

                var refund = jQuery(this);

                Modal.confirm('Não será possível reverter esta ação. Deseja continuar?');

                jQuery('.rakutenpay-confirm-button').on('click', function (target) {
                    if (target.currentTarget.id == 'accept') {
                        doRefund(refund.data('config'));
                    } else {
                        Modal.hideLoading();
                    }
                });
            });
        };
    };
</script>
<script type="text/javascript"
        src="<?php echo $this->getSkinUrl('rakuten/rakutenpay/js/rakutenpay-module.js'); ?>"></script>
